{"version":3,"sources":["providers/theme/theme.js","providers/theme/globalStyle.js","providers/theme/index.js","providers/localization/el.js","providers/localization/index.js","providers/notifications/context.js","providers/notifications/notification.js","providers/notifications/index.js","providers/notifications/getDispatch.js","pages/index.js","app.js","serviceWorker.js","index.js"],"names":["global","colors","brand","focus","GlobalStyle","createGlobalStyle","Theme","children","Grommet","theme","style","height","Localization","locale","messages","el","createContext","Container","styled","Box","Notification","type","message","animation","background","pad","left","vertical","right","Text","color","size","Notifications","useState","state","setState","intl","formatMessage","useNativeIntl","id","useIntl","dispatch","useMemo","timeout","clear","clearTimeout","make","setTimeout","info","warning","server","error","status","getDispatch","Provider","value","Categories","lazy","Products","Product","NotFound","Page","fallback","basepath","data-testid","path","default","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"2LAAe,G,MAAA,CACbA,OAAQ,CACNC,OAAQ,CAACC,MAAO,UAAWC,MAAO,c,gZCAtC,IAuBeC,EAvBKC,4BAAH,KCwBFC,EArBD,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACZ,kBAACC,EAAA,EAAD,CAASC,MAAOA,EAAOC,MAAO,CAACC,OAAQ,SACrC,kBAAC,EAAD,MACCJ,I,wBCRU,GACb,mBAAoB,+HACpB,gBAAiB,kJCaJK,EAXM,SAAC,GAAD,IAAEL,EAAF,EAAEA,SAAF,OACnB,kBAAC,IAAD,CAAcM,OAAO,KAAKC,SAAUC,GACjCR,ICJUS,4B,+JCEf,IAAMC,EAAYC,kBAAOC,IAAPD,CAAH,KAoBAE,EAZM,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAAR,OACnB,kBAACL,EAAD,CAAWM,UAAU,UACnB,kBAACJ,EAAA,EAAD,CACEK,WAAqB,SAATH,EAAkB,YAAc,iBAC5CI,IAAK,CAACC,KAAM,SAAUC,SAAU,QAASC,MAAO,WAChD,kBAACC,EAAA,EAAD,CAAMC,MAAM,QAAQC,KAAK,SACtBT,MCIMU,EAhBO,SAAC,GAAgB,IAAfzB,EAAc,EAAdA,SAAc,EACV0B,qBADU,mBAC7BC,EAD6B,KACtBC,EADsB,KAE9BC,EHEe,WAAO,IACrBC,EAAiBC,cAAjBD,cACP,OAAO,SAAAE,GAAE,OAAIF,EAAc,CAACE,QGJfC,GAEPC,EAAWC,mBAAQ,kBCVZ,SAACD,EAAD,GAAuB,IAAXL,EAAU,EAAVA,KACrBO,EAAU,KAERC,EAAQ,WACZC,aAAaF,GACbF,EAAS,OAGLK,EAAO,SAAAzB,GAAI,OAAI,SAAAC,GACnBsB,IACAH,EAAS,CAACpB,OAAMC,YAChBqB,EAAUI,WAAWH,EAAO,OAGxBI,EAAOF,EAAK,QAElB,MAAO,CACLE,OACAC,QAASH,EAAK,WACdI,OAAQ,SAAAC,GACN,IAAM7B,EAAUc,GAAuB,IAAlBe,EAAMC,OAAgB,mBAAqB,iBAChEJ,EAAK1B,KDXsB+B,CAAYlB,EAAU,CAACC,WAAQ,IAE9D,OACE,kBAAC,WAAD,KACGF,GAAS,kBAAC,EAAiBA,GAC5B,kBAAC,EAAQoB,SAAT,CAAkBC,MAAOd,GAAWlC,K,QEZpCiD,EAAaC,gBAAK,kBAAM,gCACxBC,EAAWD,gBAAK,kBAAM,gCACtBE,EAAUF,gBAAK,kBAAM,gCACrBG,EAAWH,gBAAK,kBAAM,gCAgBbI,EAdF,WACX,OACE,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAAC,IAAD,CAAQC,SAAS,WAAWC,cAAY,UACtC,kBAACR,EAAD,CAAYS,KAAK,MACjB,kBAACP,EAAD,CAAUO,KAAK,0BACf,kBAACN,EAAD,CAASM,KAAK,iBAEd,kBAACL,EAAD,CAAUM,SAAO,OCAVC,EAVH,kBACV,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,UCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCZnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAM7B,c","file":"static/js/main.7bca773d.chunk.js","sourcesContent":["export default {\n  global: {\n    colors: {brand: '#1a73e8', focus: '#F8F8F8'}\n  }\n};\n","import {createGlobalStyle} from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body, html, #root {\n    margin: 0;\n    padding: 0;\n    height: 100%;\n  }\n\n  :focus {\n    outline: 0;\n  }\n  a {\n    text-decoration: none;\n    text-decoration-color: initial;\n    color: initial;\n  }\n  a:-webkit-any-link {\n    color: initial;\n  }\n  button:focus {\n    outline:0 !important;\n  }\n`;\n\nexport default GlobalStyle;\n","import React, {useContext} from 'react';\nimport {Grommet, ResponsiveContext} from 'grommet';\nimport theme from './theme';\nimport GlobalStyle from './globalStyle';\n\nconst Theme = ({children}) => (\n  <Grommet theme={theme} style={{height: '100%'}}>\n    <GlobalStyle />\n    {children}\n  </Grommet>\n);\n\nexport const useScreenSize = () => {\n  const size = useContext(ResponsiveContext);\n\n  return useMemo(\n    () => ({\n      size,\n      isSmall: size === 'small',\n      isMedium: size === 'medium',\n      isLarge: size === 'large'\n    }),\n    [size]\n  );\n};\n\nexport default Theme;\n","export default {\n  'error.connection': 'Η σύνδεση δεν είναι καλή',\n  'error.general': 'Ουπς, συνέβει κάποιο σφάλμα'\n};\n","import React from 'react';\nimport {IntlProvider, useIntl as useNativeIntl} from 'react-intl';\nimport el from './el';\n\nconst Localization = ({children}) => (\n  <IntlProvider locale=\"el\" messages={el}>\n    {children}\n  </IntlProvider>\n);\n\nexport const useIntl = () => {\n  const {formatMessage} = useNativeIntl();\n  return id => formatMessage({id});\n};\n\nexport default Localization;\n","import {createContext} from 'react';\n\nexport default createContext();\n","import React from 'react';\nimport styled from 'styled-components';\nimport {Box, Text} from 'grommet';\n\nconst Container = styled(Box)`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  z-index: 10;\n`;\n\nconst Notification = ({type, message}) => (\n  <Container animation=\"fadeIn\">\n    <Box\n      background={type === 'info' ? 'neutral-3' : 'status-warning'}\n      pad={{left: 'medium', vertical: 'small', right: 'medium'}}>\n      <Text color=\"white\" size=\"large\">\n        {message}\n      </Text>\n    </Box>\n  </Container>\n);\n\nexport default Notification;\n","import React, {Fragment, useState, useMemo, useContext} from 'react';\nimport {useIntl} from 'providers/localization';\nimport getDispatch from './getDispatch';\nimport Context from './context';\nimport Notification from './notification';\n\nconst Notifications = ({children}) => {\n  const [state, setState] = useState();\n  const intl = useIntl();\n\n  const dispatch = useMemo(() => getDispatch(setState, {intl}), []);\n\n  return (\n    <Fragment>\n      {state && <Notification {...state} />}\n      <Context.Provider value={dispatch}>{children}</Context.Provider>\n    </Fragment>\n  );\n};\n\nexport const useNotification = () => useContext(Context);\n\nexport default Notifications;\n","export default (dispatch, {intl}) => {\n  let timeout = null;\n\n  const clear = () => {\n    clearTimeout(timeout);\n    dispatch(null);\n  };\n\n  const make = type => message => {\n    clear();\n    dispatch({type, message});\n    timeout = setTimeout(clear, 5000);\n  };\n\n  const info = make('info');\n\n  return {\n    info,\n    warning: make('warning'),\n    server: error => {\n      const message = intl(error.status === -1 ? 'error.connection' : 'error.general');\n      info(message);\n    }\n  };\n};\n","import React, {Suspense, lazy} from 'react';\nimport {Router} from '@reach/router';\n\nconst Categories = lazy(() => import(/* webpackChunkName: 'page.categories' */ './categories'));\nconst Products = lazy(() => import(/* webpackChunkName: 'page.products' */ './products'));\nconst Product = lazy(() => import(/* webpackChunkName: 'page.product' */ './product'));\nconst NotFound = lazy(() => import(/* webpackChunkName: 'page.notfound' */ './notFound'));\n\nconst Page = () => {\n  return (\n    <Suspense fallback={null}>\n      <Router basepath=\"/iwantit\" data-testid=\"router\">\n        <Categories path=\"/\" />\n        <Products path=\"/category/:categoryId\" />\n        <Product path=\"/product/:id\" />\n\n        <NotFound default />\n      </Router>\n    </Suspense>\n  );\n};\n\nexport default Page;\n","import React from 'react';\nimport ThemeProvider from 'providers/theme';\nimport NotificationsProvider from 'providers/notifications';\nimport LocalizationProvider from 'providers/localization';\nimport Pages from './pages';\n\nconst App = () => (\n  <ThemeProvider>\n    <LocalizationProvider>\n      <NotificationsProvider>\n        <Pages />\n      </NotificationsProvider>\n    </LocalizationProvider>\n  </ThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}